/**
`fromSeed(state, f)` creates an array that contains the elements generated by
a computation. The function `f` is first passed `state` and then is repeatedly
called to build the array. When `f` returns a tuple of `Some(item, state)`,
`item` is pushed onto the result array, and `state` is fed into the next
computation. When `f` returns `None`, the computation is complete and the new
array is returned.
*/
let fromSeed: ('state, 'state => option<('a, 'state)>) => array<'a>

let fromOption: option<'a> => array<'a>
@val external fromOneValue: 'a => array<'a> = "Array.of"
let isEmpty: array<'a> => bool
let isNotEmpty: array<'a> => bool
let exactlyOneValue: array<'a> => option<'a>
let head: array<'a> => option<'a>
let last: array<'a> => option<'a>
let lastIndex: array<'a> => option<int>
let pairs: array<'a> => array<('a, 'a)>
let prepend: (array<'a>, array<'a>) => array<'a>
let filterSome: array<option<'a>> => array<'a>
let filterSomeWith: (array<'a>, ('a, int) => option<'b>) => array<'b>
let validateIndex: (array<'a>, int) => option<int>
