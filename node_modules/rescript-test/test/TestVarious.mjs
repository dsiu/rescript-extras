// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Test from "../src/Test.mjs";
import * as Curry from "rescript/lib/es6/curry.js";
import * as Caml_obj from "rescript/lib/es6/caml_obj.js";
import * as Belt_Option from "rescript/lib/es6/belt_Option.js";
import * as Caml_js_exceptions from "rescript/lib/es6/caml_js_exceptions.js";

function equal(message, a, b) {
  Test.assertion(message, "equal", (function (a, b) {
          return a === b;
        }), a, b);
}

function deepEqual(message, a, b) {
  Test.assertion(message, "deepEqual", Caml_obj.equal, a, b);
}

function equalAsString(message, a, b) {
  Test.assertion(message, "equal", (function (a, b) {
          return String(a) === b;
        }), a, b);
}

Test.testAsync("Async", undefined, (function (cb) {
        setTimeout((function (param) {
                equal(undefined, 1, 1);
                equalAsString(undefined, 1, "1");
                Curry._2(cb, undefined, undefined);
              }), 100);
      }));

Test.testAsync("Async", 10, (function (_cb) {
        
      }));

Test.test("Equals", (function (param) {
        equal(undefined, 1, 1);
      }));

Test.test("Should fail", (function (param) {
        Test.fail(undefined, undefined);
      }));

Test.test("Should throw", (function (param) {
        Test.throws(undefined, undefined, (function (param) {
                throw new Error("Helloooo");
              }));
        Test.throws("Should not be a JS error", (function (error) {
                return Belt_Option.isNone(Caml_js_exceptions.as_js_exn(error));
              }), (function (param) {
                throw new Error("Helloooo");
              }));
      }));

Test.test("Should not throw", (function (param) {
        Test.doesNotThrow(undefined, (function (param) {
                
              }));
      }));

Test.test("DeepEquals", (function (param) {
        equal(undefined, "user", "user");
        equal(undefined, "user", "a");
        equal(undefined, 1, undefined);
        deepEqual(undefined, {
              username: "user",
              id: "a"
            }, {
              username: "user",
              id: "a"
            });
        Test.todo("Check that user is ok");
      }));

Test.testAsync("Async with planned under", undefined, (function (cb) {
        setTimeout((function (param) {
                equal(undefined, 1, 1);
                equalAsString(undefined, 1, "1");
                Curry._2(cb, 0, undefined);
              }), 100);
      }));

Test.testAsync("Async with planned exact", undefined, (function (cb) {
        setTimeout((function (param) {
                equal(undefined, 1, 1);
                equalAsString(undefined, 1, "1");
                Curry._2(cb, 2, undefined);
              }), 100);
      }));

Test.testAsync("Async with planned over", undefined, (function (cb) {
        setTimeout((function (param) {
                equal(undefined, 1, 1);
                equalAsString(undefined, 1, "1");
                Curry._2(cb, 3, undefined);
              }), 100);
      }));

Test.testAsync("Async with planned and fails", undefined, (function (cb) {
        setTimeout((function (param) {
                equal(undefined, 1, 2);
                equalAsString(undefined, 1, "1");
                Curry._2(cb, 2, undefined);
              }), 100);
      }));

export {
  equal ,
  deepEqual ,
  equalAsString ,
}
/*  Not a pure module */
