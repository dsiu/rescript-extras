// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Test from "../src/Test.mjs";
import * as Curry from "rescript/lib/es6/curry.js";
import * as Caml_obj from "rescript/lib/es6/caml_obj.js";
import * as Belt_MapString from "rescript/lib/es6/belt_MapString.js";

function equal(message, a, b) {
  Test.assertion(message, "equal", (function (a, b) {
          return a === b;
        }), a, b);
}

function deepEqual(message, a, b) {
  Test.assertion(message, "deepEqual", Caml_obj.equal, a, b);
}

Test.testAsync("Async", undefined, (function (cb) {
        setTimeout((function (param) {
                Test.pass(undefined, undefined);
                Curry._2(cb, undefined, undefined);
              }), 100);
      }));

Test.test("Equals", (function (param) {
        equal(undefined, 1, 1);
      }));

function isCharCode(a, b) {
  return a.charCodeAt(0) === b;
}

Test.test("Custom comparator", (function (param) {
        Test.assertion("Char code should match", "isCharCode", isCharCode, "a", 97.0);
      }));

Test.test("DeepEquals", (function (param) {
        equal(undefined, "user", "user");
        deepEqual(undefined, {
              username: "user",
              id: "a"
            }, {
              username: "user",
              id: "a"
            });
      }));

function testWithSetup(param, param$1, param$2) {
  return Test.testWith((function (param) {
                return {
                        contents: 0
                      };
              }), param, param$1, param$2);
}

testWithSetup(undefined, "Setup", (function (someRef) {
        someRef.contents = someRef.contents + 1 | 0;
        equal(undefined, someRef.contents, 1);
      }));

testWithSetup(undefined, "Setup", (function (someRef) {
        equal(undefined, someRef.contents, 0);
        someRef.contents = someRef.contents + 1 | 0;
        someRef.contents = someRef.contents + 1 | 0;
        equal(undefined, someRef.contents, 2);
      }));

var partial_arg = (function (someRef) {
    someRef.contents = 0;
  });

function testWithSetupAndTeardown(param, param$1) {
  return Test.testWith((function (param) {
                return {
                        contents: 0
                      };
              }), partial_arg, param, param$1);
}

testWithSetupAndTeardown("Setup & teardown", (function (someRef) {
        someRef.contents = someRef.contents + 1 | 0;
        equal(undefined, someRef.contents, 1);
      }));

testWithSetupAndTeardown("Setup & teardown 2", (function (someRef) {
        equal(undefined, someRef.contents, 0);
        someRef.contents = someRef.contents + 1 | 0;
        someRef.contents = someRef.contents + 1 | 0;
        equal(undefined, someRef.contents, 2);
      }));

var partial_arg$1 = (function (someRef) {
    someRef.contents = 0;
  });

function testAsyncWithSetupAndTeardown(param, param$1, param$2) {
  return Test.testAsyncWith((function (param) {
                return {
                        contents: 0
                      };
              }), partial_arg$1, param, param$1, param$2);
}

testAsyncWithSetupAndTeardown("Async setup & teardown", undefined, (function (someRef, callback) {
        someRef.contents = someRef.contents + 1 | 0;
        equal(undefined, someRef.contents, 1);
        Curry._2(callback, undefined, undefined);
      }));

testAsyncWithSetupAndTeardown("Async setup & teardown 2", undefined, (function (someRef, callback) {
        equal(undefined, someRef.contents, 0);
        someRef.contents = someRef.contents + 1 | 0;
        someRef.contents = someRef.contents + 1 | 0;
        equal(undefined, someRef.contents, 2);
        Curry._2(callback, undefined, undefined);
      }));

function stringMapEqual(message, a, b) {
  Test.assertion(message, "stringMapEqual", (function (a, b) {
          return Belt_MapString.eq(a, b, (function (a, b) {
                        return a === b;
                      }));
        }), a, b);
}

Test.test("Cutom operator Equals", (function (param) {
        stringMapEqual(undefined, Belt_MapString.fromArray([[
                    "a",
                    1
                  ]]), Belt_MapString.fromArray([[
                    "a",
                    1
                  ]]));
      }));

export {
  equal ,
  deepEqual ,
  isCharCode ,
  testWithSetup ,
  testWithSetupAndTeardown ,
  testAsyncWithSetupAndTeardown ,
  stringMapEqual ,
}
/*  Not a pure module */
